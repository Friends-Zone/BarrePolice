--[[
    Copyright 2017 Diego Barreiro <diego@makeroid.io>
    This code is licensed under the MIT. See LICENSE for details.
]]

local clashroyale = {}
local mattata = require('mattata')
local redis = dofile('libs/redis.lua')
local requests = require('requests')
local json = require('dkjson')

function clashroyale:init(configuration)
    assert(
        configuration.keys.clashroyale,
        'clashroyale.lua requires an API key, and you haven\'t got one configured!'
    )
    clashroyale.commands = mattata.commands(self.info.username):command('clashroyale'):command('cr').table
    clashroyale.help = '/clashroyale player <#ID> - Send information about that user.\n\nAlis: /cr'
end

function clashroyale.request(key, input, content)
    if input == "player" then
        headers = {auth = key}
        response = requests.get{url = 'https://api.cr-api.com/player/'..content, headers = headers}
        return response.json()
    end
end

function clashroyale.parse_player(data)
    local output = ""
    output = "<b>Player</b>\n"
    output = output.. mattata.escape_html(data.name) .. " [#" .. data.tag .. "]\n"
    if rank then
        output = output.. math.floor(tonumber(data.trophies)) .. "üèÜ - Top " .. data.rank .. "\n"
    else
        output = output.. math.floor(tonumber(data.trophies)) .. "üèÜ" .. "\n"
    end
    output = output.. "Arena <i>" .. data.arena.name .. "</i> <code>" .. data.arena.arena .. "</code>\n\n"
    output = output.. "<b>Games</b>\n"
    output = output.. "Total Games Played: <code>" .. math.floor(tonumber(data.games.total)) .. "</code>\n"
    output = output.. "Tournament Games Played: <code>" .. math.floor(tonumber(data.games.tournamentGames)) .. "</code>\n"
    output = output.. "Wins: <code>" .. math.floor(tonumber(data.games.wins)) .. "</code> (<i>" .. math.floor(tonumber(data.games.winsPercent)*100) .. "%</i>) | Draws: <code>" .. math.floor(tonumber(data.games.draws)) .. "</code> (<i>" .. math.floor(tonumber(data.games.drawsPercent)*100) .. "%</i>) | Losses: <code>" .. math.floor(tonumber(data.games.losses)) .. "</code> (<i>" .. math.floor(tonumber(data.games.lossesPercent)*100) .. "%</i>)\n"

    local keyboard = mattata.inline_keyboard()
    :row(mattata.row():callback_data_button('Clan Information', 'clashroyale:player:' .. data.tag .. ':clan'))
    :row(mattata.row():callback_data_button('User Stats', 'clashroyale:player:' .. data.tag .. ':stats'):callback_data_button('Season Stats', 'clashroyale:player:' .. data.tag .. ':league'))
    :row(mattata.row():callback_data_button('Current Deck', 'clashroyale:player:' .. data.tag .. ':deck'):url_button('Copy Deck', data.deckLink))
    :row(mattata.row():callback_data_button('Chest Cycle', 'clashroyale:player:' .. data.tag .. ':chests'))
    :row(mattata.row():callback_data_button('Cards Level', 'clashroyale:player:' .. data.tag .. ':cards'))
    :row(mattata.row():callback_data_button('Battle History', 'clashroyale:player:' .. data.tag .. ':battles'))

    return output, keyboard
end

function clashroyale.parse_player_chests(data)
    local output = ""
    output = "<b>Player</b>\n"
    output = output.. mattata.escape_html(data.name) .. " [#" .. data.tag .. "]\n"
    if rank then
        output = output.. math.floor(tonumber(data.trophies)) .. "üèÜ - Top " .. data.rank .. "\n"
    else
        output = output.. math.floor(tonumber(data.trophies)) .. "üèÜ" .. "\n"
    end
    output = output.. "Arena <i>" .. data.arena.name .. "</i> <code>" .. data.arena.arena .. "</code>\n\n\n"
    output = output.. "<b>Upcoming Chests</b>\n"
    output = output.. "1. <i>" .. (data.chestCycle.upcoming[1]):gsub("^%l", string.upper) .. " Chest</i>\n"
    output = output.. "2. <i>" .. (data.chestCycle.upcoming[2]):gsub("^%l", string.upper) .. " Chest</i>\n"
    output = output.. "3. <i>" .. (data.chestCycle.upcoming[3]):gsub("^%l", string.upper) .. " Chest</i>\n"
    output = output.. "4. <i>" .. (data.chestCycle.upcoming[4]):gsub("^%l", string.upper) .. " Chest</i>\n"
    output = output.. "5. <i>" .. (data.chestCycle.upcoming[5]):gsub("^%l", string.upper) .. " Chest</i>\n"
    output = output.. "6. <i>" .. (data.chestCycle.upcoming[6]):gsub("^%l", string.upper) .. " Chest</i>\n"
    output = output.. "7. <i>" .. (data.chestCycle.upcoming[7]):gsub("^%l", string.upper) .. " Chest</i>\n"
    output = output.. "8. <i>" .. (data.chestCycle.upcoming[8]):gsub("^%l", string.upper) .. " Chest</i>\n\n"
    output = output.. "<code>" .. math.floor(tonumber(data.chestCycle.superMagical)) .. "</code> Chests missing for a <i>SuperMagical Chest</i>\n"
    output = output.. "<code>" .. math.floor(tonumber(data.chestCycle.magical)) .. "</code> Chests missing for a <i>Magical Chest</i>\n"
    output = output.. "<code>" .. math.floor(tonumber(data.chestCycle.legendary)) .. "</code> Chests missing for a <i>Legendary Chest</i>\n"
    output = output.. "<code>" .. math.floor(tonumber(data.chestCycle.epic)) .. "</code> Chests missing for an <i>Epic Chest</i>\n"
    output = output.. "<code>" .. math.floor(tonumber(data.chestCycle.giant)) .. "</code> Chests missing for a <i>Giant Chest</i>\n"

    local keyboard = mattata.inline_keyboard()
    :row(mattata.row():callback_data_button('Back', 'clashroyale:player:' .. data.tag .. ':back'))

    return output, keyboard
end

function clashroyale.parse_player_clan(data)
    local output = ""
    output = "<b>Player</b>\n"
    output = output.. mattata.escape_html(data.name) .. " [#" .. data.tag .. "]\n"
    if rank then
        output = output.. math.floor(tonumber(data.trophies)) .. " üèÜ - Top " .. data.rank .. "\n"
    else
        output = output.. math.floor(tonumber(data.trophies)) .. " üèÜ" .. "\n"
    end
    output = output.. "Arena: <i>" .. data.arena.name .. "</i>, <code>" .. data.arena.arena .. "</code>\n\n\n"
    output = output.. "<b>Clan</b>\n"
    output = output.. "<a href=\"" .. data.clan.badge.image .. "\">" .. mattata.escape_html(data.clan.name) .. "</a> [#" .. data.clan.tag .. "]\n"
    output = output.. "Role: <i>" .. (data.clan.role):gsub("^%l", string.upper) .. "</i>\n\n"
    output = output.. "<b>Donations</b>\n"
    output = output.. "Donations Given: <code>" .. math.floor(tonumber(data.clan.donations)) .. "</code>\n"
    output = output.. "Donations Received: <code>" .. math.floor(tonumber(data.clan.donationsReceived)) .. "</code>\n\n"
    output = output.. "To get <b>detailed Clan Information</b>, copy this command and <i>send it to me</i>:\n"
    output = output.. "<code>/cr clan " .. data.clan.tag .. "</code>"

    local keyboard = mattata.inline_keyboard()
    :row(mattata.row():callback_data_button('Back', 'clashroyale:player:' .. data.tag .. ':back'))

    return output, keyboard
end

function clashroyale:on_callback_query(callback_query, message, configuration)
    if callback_query.data == 'nil'
    then
        return mattata.answer_callback_query(callback_query.id)
    end
    if callback_query.data:match('^player:%w*:back$')
    then
        local player = callback_query.data:match('^player:(%w*):back$')
        local text, keyboard = clashroyale.parse_player(clashroyale.request(configuration.keys.clashroyale, "player", player))
        return mattata.edit_message_text(
            message.chat.id,
            message.message_id,
            text,
            'html',
            false,
            keyboard
        )
    elseif callback_query.data:match('^player:%w*:chests$')
    then
        local player = callback_query.data:match('^player:(%w*):chests$')
        local text, keyboard = clashroyale.parse_player_chests(clashroyale.request(configuration.keys.clashroyale, "player", player))
        return mattata.edit_message_text(
            message.chat.id,
            message.message_id,
            text,
            'html',
            false,
            keyboard
        )
    elseif callback_query.data:match('^player:%w*:clan$')
    then
        local player = callback_query.data:match('^player:(%w*):clan$')
        local text, keyboard = clashroyale.parse_player_clan(clashroyale.request(configuration.keys.clashroyale, "player", player))
        return mattata.edit_message_text(
            message.chat.id,
            message.message_id,
            text,
            'html',
            false,
            keyboard
        )
    else
        return false
    end
end

function clashroyale:on_message(message, configuration, language)
    local input = mattata.input(message.text)
    if not input then
        return mattata.send_reply(message, clashroyale.help)
    end

    if input:match('^player') then
        local json_data = clashroyale.request(configuration.keys.clashroyale, "player", input:gsub("%s+", ""):gsub("player", ""):gsub("#", ""))
        if json_data.tag then
            local text, keyboard = clashroyale.parse_player(json_data)
            return mattata.send_message(message, text, 'html', false, false, message.message_id, keyboard)
        else
            if redis:hget('clashroyale:' .. message.from.id, 'player') then
                local json_data = clashroyale.request(configuration.keys.clashroyale, "player", redis:hget('clashroyale:' .. message.from.id, 'player'))
                local text, keyboard = clashroyale.parse_player(json_data)
                return mattata.send_message(message, text, 'html', false, false, message.message_id, keyboard)
            else
                return mattata.send_reply(message, language['errors']['results'])
            end
        end
    elseif input:match('^save') then
        local tag = input:gsub("%s+", ""):gsub("save", ""):gsub("#", "")
        local json_data = clashroyale.request(configuration.keys.clashroyale, "player", tag)
        if json_data.tag then
            redis:hset('clashroyale:' .. message.from.id, 'player', json_data.tag)
            return mattata.send_message(message, "Your player info has been saved as <i>" .. json_data.name .. "</i>", 'html', false, false, message.message_id)
        else
            return mattata.send_reply(message, language['errors']['results'])
        end
    else
        return mattata.send_reply(message, clashroyale.help)
    end
end

return clashroyale
