--[[
    Copyright 2017 Diego Barreiro <diego@makeroid.io>
    This code is licensed under the MIT. See LICENSE for details.
]]

local nsfw = {}
local mattata = require('mattata')
local requests = require('requests')
local url = require('socket.url')
local json = require('dkjson')

function nsfw:init(configuration)
    assert(
        configuration.keys.nsfw,
        'nsfw.lua requires an API key, and you haven\'t got one configured!'
    )
    nsfw.commands = mattata.commands(self.info.username)
    :command('nsfw'):command('is[xX]').table
    nsfw.help = '/nsfw - In reply to an image, will detect if it\'s SFW or not.\n/nsfw key - Generate an API key for you'
end

function nsfw.request(key, input, content)
    if input == "generate" then
        local headers = {auth = key}
        response = requests.get{url = 'http://nsfw.api.barreiro.xyz/key.php?id='..content, headers = headers}
        return response.json()
    elseif input == "detect" then
        local headers = {auth = key, image = content}
        response = requests.get{url = 'http://nsfw.api.barreiro.xyz/', headers = headers, timeout = 20}
        return response.json()
    end
end

function nsfw.detect(message, key, url, type)
    local json_data = nsfw.request(key, "detect", url)
    return json_data
end

function nsfw:on_message(message, configuration, language)
    local input = mattata.input(message.text)
    if not input and not message.reply then
        return mattata.send_reply(message, nsfw.help)
    end

    if input and input:match('^key') then
        local json_data = nsfw.request(configuration.keys.nsfw, "generate", message.from.id)
        if message.chat.id ~= message.from.id then
            mattata.send_reply(message, "I've sent you the key in a private message. Remember to start me before.")
        end
        if json_data and json_data.result == "ok" then
            return mattata.send_message(message.from.id, "Your <b>API key</b> is <code>" .. json_data.content.api_key .. "</code>\n\n<i>If you need a new one, contact</i> <a href='https://t.me/Barreeeiroo'>@Barreeeiroo</a>", 'html')
        else
            return mattata.send_reply(message, language['errors']['generic'])
        end

    elseif message.reply then
        if message.reply.photo then
            local file = mattata.get_file(message.reply.photo[#message.reply.photo].file_id)
            if not file then return false end
            local request_url = string.format('https://api.telegram.org/file/bot%s/%s', configuration.bot_token, file.result.file_path)
            local json_data = nsfw.detect(message, configuration.keys.nsfw, request_url)
            if json_data and json_data.result == "ok" then
                return mattata.send_message(
                    message.chat.id,
                    "This photo has a chance of <b>" .. mattata.round((json_data.content.score)*100, 2) .. "%</b> to contain NonSafeForWork content"..(mattata.round((json_data.content.score)*100, 2)<20 and "\n<i>Probably it's a safe image</i>" or (mattata.round((json_data.content.score)*100, 2)>80 and "\n<i>It's more than likely to contain some type of NSFW content!</i>" or "")),
                    'html',
                    false,
                    false,
                    message.reply.message_id
                )
            else
                return mattata.send_reply(message, language['errors']['generic'].."\n\n<code>"..json_data.content.code.."</code>", 'html')
            end
        elseif message.reply.document and message.reply.document.mime_type:match('^image/%a*') then
            local file = mattata.get_file(message.reply.document.file_id)
            if not file then return false end
            local request_url = string.format('https://api.telegram.org/file/bot%s/%s', configuration.bot_token, file.result.file_path)
            local json_data = nsfw.detect(message, configuration.keys.nsfw, request_url)
            if json_data and json_data.result == "ok" then
                return mattata.send_message(
                    message.chat.id,
                    "This photo has a chance of <b>" .. mattata.round((json_data.content.score)*100, 2) .. "%</b> to contain NonSafeForWork content"..(mattata.round((json_data.content.score)*100, 2)<20 and "\n<i>Probably it's a safe image</i>" or (mattata.round((json_data.content.score)*100, 2)>80 and "\n<i>It's more than likely to contain some type of NSFW content!</i>" or "")),
                    'html',
                    false,
                    false,
                    message.reply.message_id
                )
            else
                return mattata.send_reply(message, language['errors']['generic'].."\n\n<code>"..json_data.content.code.."</code>", 'html')
            end
        elseif message.reply.sticker then
            local file = mattata.get_file(message.reply.sticker.thumb.file_id)
            if not file then return false end
            local request_url = string.format('https://api.telegram.org/file/bot%s/%s', configuration.bot_token, file.result.file_path)
            local json_data = nsfw.detect(message, configuration.keys.nsfw, request_url)
            if json_data and json_data.result == "ok" then
                return mattata.send_message(
                    message.chat.id,
                    "This sticker has a chance of <b>" .. mattata.round((json_data.content.score)*100, 2) .. "%</b> to contain NonSafeForWork content"..(mattata.round((json_data.content.score)*100, 2)<20 and "\n<i>Probably it's a safe sticker</i>" or (mattata.round((json_data.content.score)*100, 2)>80 and "\n<i>It's more than likely to contain some type of NSFW content!</i>" or "")),
                    'html',
                    false,
                    false,
                    message.reply.message_id
                )
            else
                return mattata.send_reply(message, language['errors']['generic'].."\n\n<code>"..json_data.content.code.."</code>", 'html')
            end
        elseif message.reply.video then
            local file
            if message.reply.video.duration > 10 then
                file = mattata.get_file(message.reply.video.thumb.file_id)
            else
                file = mattata.get_file(message.reply.video.file_id)
            end
            if not file then return false end
            local request_url = string.format('https://api.telegram.org/file/bot%s/%s', configuration.bot_token, file.result.file_path)
            local json_data = nsfw.detect(message, configuration.keys.nsfw, request_url)
            if json_data and json_data.result == "ok" then
                return mattata.send_message(
                    message.chat.id,
                    "This video has a chance of <b>" .. mattata.round((json_data.content.avg or json_data.content.score)*100, 2) .. "%</b> to contain NonSafeForWork content" ..  (json_data.content.avg and "\n<i>Maximum Score Found:</i> <code>" .. mattata.round((json_data.content.highest)*100, 2) .. "</code>\n<i>Minimum Score Found:</i> <code>" .. mattata.round((json_data.content.lowest)*100, 2) .. "</code>" or "") ..(mattata.round((json_data.content.avg or json_data.content.score)*100, 2)<20 and "\n\n<i>Probably it's a safe image</i>" or (mattata.round((json_data.content.avg or json_data.content.score)*100, 2)>80 and "\n<i>It's more than likely to contain some type of NSFW content!</i>" or "")),
                    'html',
                    false,
                    false,
                    message.reply.message_id
                )
            else
                return mattata.send_reply(message, language['errors']['generic'].."\n\n<code>"..json_data.content.code.." | "..json_data.content.message.."</code>", 'html')
            end
        elseif message.reply.document and message.reply.document.mime_type:match('^video/%a*') then
            local file
            if not message.reply.document.file_name == "giphy.mp4" and message.reply.document.duration > 10 then
                file = mattata.get_file(message.reply.document.thumb.file_id)
            else
                file = mattata.get_file(message.reply.document.file_id)
            end
            if not file then return false end
            local request_url = string.format('https://api.telegram.org/file/bot%s/%s', configuration.bot_token, file.result.file_path)
            local json_data = nsfw.detect(message, configuration.keys.nsfw, request_url)
            if json_data and json_data.result == "ok" then
                return mattata.send_message(
                    message.chat.id,
                    "This video has a chance of <b>" .. mattata.round((json_data.content.avg or json_data.content.score)*100, 2) .. "%</b> to contain NonSafeForWork content" ..  (json_data.content.avg and "\n<i>Maximum Score Found:</i> <code>" .. mattata.round((json_data.content.highest)*100, 2) .. "</code>\n<i>Minimum Score Found:</i> <code>" .. mattata.round((json_data.content.lowest)*100, 2) .. "</code>" or "") ..(mattata.round((json_data.content.avg or json_data.content.score)*100, 2)<20 and "\n\n<i>Probably it's a safe image</i>" or (mattata.round((json_data.content.avg or json_data.content.score)*100, 2)>80 and "\n<i>It's more than likely to contain some type of NSFW content!</i>" or "")),
                    'html',
                    false,
                    false,
                    message.reply.message_id
                )
            else
                return mattata.send_reply(message, language['errors']['generic'].."\n\n<code>"..json_data.content.code.." | "..json_data.content.message.."</code>", 'html')
            end
        else
            return mattata.send_reply(message, "I can only detect NSFW content from images, stickers, GIFs and videos!")
        end
    else
        return mattata.send_reply(message, nsfw.help)
    end
end

return nsfw
